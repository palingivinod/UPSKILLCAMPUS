# -*- coding: utf-8 -*-
"""SmaryCityTraffic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AbUAbLNkLYffCDRHXXD-nnU59KsfzQMG
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score, mean_absolute_percentage_error
from xgboost import XGBRegressor

train = pd.read_csv('train_aWnotuB.csv')
test = pd.read_csv('test_BdBKkAj.csv')

train['DateTime'] = pd.to_datetime(train['DateTime'])
test['DateTime'] = pd.to_datetime(test['DateTime'])

def create_time_features(df):
    df['hour'] = df['DateTime'].dt.hour
    df['day'] = df['DateTime'].dt.day
    df['month'] = df['DateTime'].dt.month
    df['dayofweek'] = df['DateTime'].dt.dayofweek
    df['is_weekend'] = df['dayofweek'].isin([5, 6]).astype(int)
    return df

train = create_time_features(train)
test = create_time_features(test)

feature_cols = ['hour', 'day', 'month', 'dayofweek', 'is_weekend']

all_test_preds = []

for junc in [1, 2, 3, 4]:
    print(f"\n Junction {junc} Results")
    train_j = train[train['Junction'] == junc]
    test_j = test[test['Junction'] == junc]

    X = train_j[feature_cols]
    y = train_j['Vehicles']
    X_test = test_j[feature_cols]

    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

    model = XGBRegressor(n_estimators=100, learning_rate=0.1, random_state=42)
    model.fit(X_train, y_train)

    y_val_pred = model.predict(X_val)

    mae = mean_absolute_error(y_val, y_val_pred)
    rmse = np.sqrt(mean_squared_error(y_val, y_val_pred))
    r2 = r2_score(y_val, y_val_pred)
    mape = mean_absolute_percentage_error(y_val, y_val_pred) * 100

    print(f"MAE  : {mae:.2f}")
    print(f"RMSE : {rmse:.2f}")
    print(f"R²   : {r2:.4f}")
    print(f"MAPE : {mape:.2f}%")

    val_df = X_val.copy()
    val_df['Actual'] = y_val.values
    val_df['Predicted'] = y_val_pred
    hourly_summary = val_df.groupby('hour')[['Actual', 'Predicted']].sum().reset_index()

    print("\n Total Vehicles by Hour")
    print(hourly_summary)


    plt.figure(figsize=(10, 5))
    plt.plot(hourly_summary['hour'], hourly_summary['Actual'], label='Actual', marker='o')
    plt.plot(hourly_summary['hour'], hourly_summary['Predicted'], label='Predicted', marker='x')
    plt.title(f"Junction {junc} — Actual vs Predicted Traffic by Hour")
    plt.xlabel("Hour of Day")
    plt.ylabel("Total Vehicles")
    plt.grid(True)
    plt.legend()
    plt.show()


    test_pred = model.predict(X_test)
    test_pred = np.round(test_pred).astype(int)

    pred_df = pd.DataFrame({
        'ID': test_j['ID'],
        'Vehicles': test_pred
    })

    all_test_preds.append(pred_df)

final_submission = pd.concat(all_test_preds).sort_values('ID')

print("\n Final test predictions (first 10 rows):")
print(final_submission.head(10))